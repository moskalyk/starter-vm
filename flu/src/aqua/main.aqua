aqua Main

import "@fluencelabs/aqua-lib/builtin.aqua"
import "@fluencelabs/aqua-lib/subnet.aqua"

use "deals.aqua"
use "hosts.aqua"
import "services.aqua"

export helloWorld, MutexAddressRouter, VM, call, deploy

service AddressRouter("addressrouter"): -- could be marine service pulling from onchain ids
    route(tx: string) -> PeerId

service VM("vm"):
    call(tx: string) -> bool
    deploy(tx: string) -> bool

func call(relay_id: PeerId, peer_id: PeerId, contractAddress: string, tx: string) -> bool:

    peer: *PeerId

    on peer_id:
        peer <<- AddressRouter.route(contractAddress)

    on peer[0] via relay_id:
        res <- VM.call(tx)
    <- res

func deploy(relay_id: PeerId, peer_id: PeerId, contractAddress: string, tx: string) -> bool:

    peer: *PeerId

    on peer_id:
        peer <<- AddressRouter.route(contractAddress)

    on peer[0] via relay_id:
        res <- VM.deploy(tx)
    <- res

func helloWorld(name: string) -> string:
    <- Op.concat_strings("Hello, ", name)